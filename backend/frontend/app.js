
// Navigation with smooth transitions
document.querySelectorAll('.nav-links a').forEach(link => {
    link.addEventListener('click', (e) => {
        e.preventDefault();
        const targetId = link.getAttribute('href').substring(1);
        
        // Update active states with animation
        document.querySelectorAll('.nav-links a').forEach(a => {
            a.classList.remove('active');
            a.style.transform = 'translateY(0)';
        });
        link.classList.add('active');
        link.style.transform = 'translateY(-2px)';
        
        // Show target section with fade effect
        document.querySelectorAll('.section').forEach(section => {
            section.style.opacity = '0';
            section.style.transform = 'translateY(20px)';
            section.classList.remove('active');
        });
        
        setTimeout(() => {
            const targetSection = document.getElementById(targetId);
            targetSection.classList.add('active');
            targetSection.style.opacity = '1';
            targetSection.style.transform = 'translateY(0)';
        }, 300);
    });
});

// Enhanced chat functionality
const chatMessages = document.getElementById('chatMessages');
const messageInput = document.getElementById('messageInput');

// Add enter key support for sending messages
messageInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
        sendMessage();
    }
});

function sendMessage() {
    const message = messageInput.value.trim();
    if (message) {
        // Add user message with typing animation
        addMessage('user', message);
        
        // Show typing indicator
        const typingIndicator = document.createElement('div');
        typingIndicator.className = 'typing-indicator';
        typingIndicator.innerHTML = '<span></span><span></span><span></span>';
        chatMessages.appendChild(typingIndicator);
        chatMessages.scrollTop = chatMessages.scrollHeight;
        
        // Simulate AI response with typing delay
        setTimeout(() => {
            chatMessages.removeChild(typingIndicator);
            const response = getAIResponse(message);
            addMessage('ai', response);
            
            // Update AI agent insights based on chat
            updateAIInsights(message);
        }, 1500);
        
        messageInput.value = '';
    }
}

function addMessage(type, text) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${type}-message`;
    
    // Add message with typing animation
    let i = 0;
    const typing = setInterval(() => {
        if (i < text.length) {
            messageDiv.textContent += text.charAt(i);
            i++;
            chatMessages.scrollTop = chatMessages.scrollHeight;
        } else {
            clearInterval(typing);
        }
    }, 30);
    
    chatMessages.appendChild(messageDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

function getAIResponse(message) {
    const lowerMessage = message.toLowerCase();
    
    // Check for suicidal thoughts first
    if (lowerMessage.includes('nicht mehr leben') || 
        lowerMessage.includes('keinen ausweg') || 
        lowerMessage.includes('i want to die') || 
        lowerMessage.includes('i don\'t want to go on')) {
        return "Das tut mir sehr leid, das zu hÃ¶ren. Es ist ganz wichtig, dass Du jetzt nicht allein bleibst. Bitte wende Dich an eine professionelle Stelle â€“ zum Beispiel den Krisendienst unter ðŸ“ž 0800 111 0 111 oder sprich mit Deinem Arzt oder Deiner Ã„rztin. Du bist nicht allein.";
    }

    // German responses
    if (lowerMessage.includes('hallo') || lowerMessage.includes('hi') || lowerMessage.includes('hey')) {
        return "Hallo! Wie geht es Dir heute? Ich bin hier, um Dir zuzuhÃ¶ren und Dich zu unterstÃ¼tzen.";
    }

    if (lowerMessage.includes('angst') || lowerMessage.includes('Ã¤ngstlich') || lowerMessage.includes('fear')) {
        return "Es ist vÃ¶llig normal, dass Du Angst hast. Das ist eine natÃ¼rliche Reaktion auf diese schwierige Situation. MÃ¶chtest Du mit mir darÃ¼ber sprechen, was Dir besonders Angst macht? Oder sollen wir eine kleine AtemÃ¼bung machen, die Dir helfen kann, Dich zu beruhigen?";
    }

    if (lowerMessage.includes('Ã¼berfordert') || lowerMessage.includes('overwhelmed')) {
        return "Ich verstehe, dass Du Dich Ã¼berfordert fÃ¼hlst. Das ist bei einer Krebsdiagnose vÃ¶llig normal. Lass uns einen Moment innehalten. MÃ¶chtest Du, dass wir gemeinsam einen kleinen Bodyscan machen? Das kann helfen, Dich wieder zu zentrieren.";
    }

    if (lowerMessage.includes('allein') || lowerMessage.includes('alone')) {
        return "Du bist nicht allein, auch wenn es sich manchmal so anfÃ¼hlt. Viele Menschen verstehen, was Du durchmachst. MÃ¶chtest Du mir erzÃ¤hlen, was Dich gerade besonders belastet?";
    }

    if (lowerMessage.includes('chemotherapie') || lowerMessage.includes('chemotherapy')) {
        return "Die Chemotherapie kann sehr beÃ¤ngstigend sein. Es ist okay, sich davor zu fÃ¼rchten. MÃ¶chtest Du darÃ¼ber sprechen, was Dir besonders Sorgen macht? Oder sollen wir uns gemeinsam auf die Behandlung vorbereiten?";
    }

    if (lowerMessage.includes('schmerzen') || lowerMessage.includes('pain')) {
        return "Schmerzen kÃ¶nnen sehr belastend sein. Es ist wichtig, dass Du Deinem Behandlungsteam davon erzÃ¤hlst. MÃ¶chtest Du, dass wir gemeinsam eine EntspannungsÃ¼bung machen, die Dir vielleicht etwas Linderung bringen kann?";
    }

    if (lowerMessage.includes('mÃ¼de') || lowerMessage.includes('tired') || lowerMessage.includes('erschÃ¶pft')) {
        return "ErschÃ¶pfung ist eine hÃ¤ufige Begleiterscheinung. Es ist wichtig, dass Du auf Deinen KÃ¶rper hÃ¶rst. MÃ¶chtest Du, dass wir gemeinsam eine kleine Pause machen? Ich kann Dir auch eine sanfte AtemÃ¼bung zeigen, die Dir neue Energie geben kann.";
    }

    if (lowerMessage.includes('familie') || lowerMessage.includes('family')) {
        return "Die Diagnose betrifft nicht nur Dich, sondern auch Deine Familie. Es ist normal, dass das fÃ¼r alle schwierig ist. MÃ¶chtest Du darÃ¼ber sprechen, wie es Dir mit der Situation in Deiner Familie geht?";
    }

    if (lowerMessage.includes('zukunft') || lowerMessage.includes('future')) {
        return "Es ist verstÃ¤ndlich, dass Du Dir Sorgen um die Zukunft machst. Lass uns einen Moment innehalten und uns auf den jetzigen Moment konzentrieren. MÃ¶chtest Du, dass wir gemeinsam eine kleine AchtsamkeitsÃ¼bung machen?";
    }

    if (lowerMessage.includes('schlaf') || lowerMessage.includes('sleep')) {
        return "Schlafprobleme sind bei einer Krebsdiagnose leider hÃ¤ufig. MÃ¶chtest Du, dass ich Dir eine kleine EntspannungsÃ¼bung zeige, die Dir beim Einschlafen helfen kann?";
    }

    // Default responses
    const defaultResponses = [
        "Ich verstehe, dass das fÃ¼r Dich sehr belastend ist. MÃ¶chtest Du mir mehr darÃ¼ber erzÃ¤hlen?",
        "Es tut mir leid, dass Du das durchmachen musst. Wie kann ich Dir in diesem Moment am besten helfen?",
        "Ich bin hier, um Dir zuzuhÃ¶ren. Was beschÃ¤ftigt Dich gerade am meisten?",
        "Es ist okay, sich so zu fÃ¼hlen. MÃ¶chtest Du, dass wir gemeinsam eine kleine AtemÃ¼bung machen?",
        "Ich hÃ¶re Dir zu. Was wÃ¼rde Dir jetzt gut tun?",
        "Es ist vÃ¶llig normal, sich so zu fÃ¼hlen. MÃ¶chtest Du darÃ¼ber sprechen, was Dir gerade durch den Kopf geht?"
    ];

    return defaultResponses[Math.floor(Math.random() * defaultResponses.length)];
}

// Enhanced meditation timer with visual feedback
let meditationTimer;
let timeLeft = 600; // 10 minutes in seconds

document.querySelector('.start-btn').addEventListener('click', function() {
    const button = this;
    const icon = button.querySelector('i');
    
    if (meditationTimer) {
        clearInterval(meditationTimer);
        button.innerHTML = '<i class="fas fa-play"></i> Start Meditation';
        timeLeft = 600;
        updateTimerDisplay();
        meditationTimer = null;
        document.querySelector('.timer-display').style.color = 'var(--primary-green)';
    } else {
        button.innerHTML = '<i class="fas fa-pause"></i> Stop Meditation';
        meditationTimer = setInterval(() => {
            timeLeft--;
            updateTimerDisplay();
            
            // Visual feedback during meditation
            const progress = (timeLeft / 600) * 100;
            document.querySelector('.timer-display').style.color = 
                `hsl(${120 - (progress * 0.5)}, 70%, 45%)`;
            
            if (timeLeft <= 0) {
                clearInterval(meditationTimer);
                button.innerHTML = '<i class="fas fa-play"></i> Start Meditation';
                timeLeft = 600;
                meditationTimer = null;
                document.querySelector('.timer-display').style.color = 'var(--primary-green)';
                
                // Show completion message
                const completionMessage = document.createElement('div');
                completionMessage.className = 'completion-message';
                completionMessage.innerHTML = `
                    <i class="fas fa-check-circle"></i>
                    <p>Meditation session complete! Great job!</p>
                `;
                document.querySelector('.meditation-timer').appendChild(completionMessage);
                
                setTimeout(() => {
                    completionMessage.remove();
                }, 5000);
                
                // Update AI insights after meditation
                updateAIInsights('meditation completed');
            }
        }, 1000);
    }
});

function updateTimerDisplay() {
    const minutes = Math.floor(timeLeft / 60);
    const seconds = timeLeft % 60;
    document.querySelector('.timer-display').textContent = 
        `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
}

// Video Call Functionality
document.querySelectorAll('.call-btn').forEach(button => {
    button.addEventListener('click', function() {
        const videoInterface = document.getElementById('videoCallInterface');
        const videoGrid = document.querySelector('.video-grid');
        
        // Hide the video cards and show the call interface
        videoGrid.style.display = 'none';
        videoInterface.style.display = 'block';
        
        // Initialize video call
        initializeVideoCall();
    });
});

function initializeVideoCall() {
    // This is a simulation of video call functionality
    // In a real application, you would use WebRTC or a similar technology
    
    // Simulate getting local video stream
    const localVideo = document.getElementById('localVideo');
    const remoteVideo = document.getElementById('remoteVideo');
    
    // Create a canvas element to simulate video
    const canvas = document.createElement('canvas');
    canvas.width = 640;
    canvas.height = 480;
    const ctx = canvas.getContext('2d');
    
    // Draw a placeholder for local video
    ctx.fillStyle = '#333';
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    ctx.fillStyle = 'white';
    ctx.font = '20px Arial';
    ctx.textAlign = 'center';
    ctx.fillText('Your Video', canvas.width / 2, canvas.height / 2);
    
    // Set the canvas as the source for local video
    localVideo.srcObject = canvas.captureStream();
    
    // Simulate remote video with a different canvas
    const remoteCanvas = document.createElement('canvas');
    remoteCanvas.width = 640;
    remoteCanvas.height = 480;
    const remoteCtx = remoteCanvas.getContext('2d');
    
    // Draw a placeholder for remote video
    remoteCtx.fillStyle = '#444';
    remoteCtx.fillRect(0, 0, remoteCanvas.width, remoteCanvas.height);
    remoteCtx.fillStyle = 'white';
    remoteCtx.font = '20px Arial';
    remoteCtx.textAlign = 'center';
    remoteCtx.fillText('Doctor\'s Video', remoteCanvas.width / 2, remoteCanvas.height / 2);
    
    // Set the canvas as the source for remote video
    remoteVideo.srcObject = remoteCanvas.captureStream();
    
    // Add event listeners for video controls
    document.getElementById('toggleVideo').addEventListener('click', function() {
        const icon = this.querySelector('i');
        if (icon.classList.contains('fa-video')) {
            icon.classList.remove('fa-video');
            icon.classList.add('fa-video-slash');
            localVideo.style.opacity = '0.5';
        } else {
            icon.classList.remove('fa-video-slash');
            icon.classList.add('fa-video');
            localVideo.style.opacity = '1';
        }
    });
    
    document.getElementById('toggleAudio').addEventListener('click', function() {
        const icon = this.querySelector('i');
        if (icon.classList.contains('fa-microphone')) {
            icon.classList.remove('fa-microphone');
            icon.classList.add('fa-microphone-slash');
        } else {
            icon.classList.remove('fa-microphone-slash');
            icon.classList.add('fa-microphone');
        }
    });
    
    document.getElementById('endCall').addEventListener('click', function() {
        // End the call and show the video cards again
        document.getElementById('videoCallInterface').style.display = 'none';
        document.querySelector('.video-grid').style.display = 'grid';
        
        // Update AI insights after video call
        updateAIInsights('video call completed');
    });
}

// AI Agent Functionality
function initializeAIAgent() {
    // Create a mood chart using Chart.js
    const ctx = document.getElementById('moodChart').getContext('2d');
    
    // Sample data for the mood chart
    const moodData = {
        labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
        datasets: [
            {
                label: 'Mood Level',
                data: [6, 5, 7, 4, 8, 7, 6],
                backgroundColor: 'rgba(76, 175, 80, 0.2)',
                borderColor: 'rgba(76, 175, 80, 1)',
                borderWidth: 2,
                tension: 0.4,
                fill: true
            },
            {
                label: 'Stress Level',
                data: [4, 5, 3, 6, 2, 3, 4],
                backgroundColor: 'rgba(244, 67, 54, 0.2)',
                borderColor: 'rgba(244, 67, 54, 1)',
                borderWidth: 2,
                tension: 0.4,
                fill: true
            }
        ]
    };
    
    // Create the chart
    new Chart(ctx, {
        type: 'line',
        data: moodData,
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true,
                    max: 10,
                    title: {
                        display: true,
                        text: 'Level (1-10)'
                    }
                }
            },
            plugins: {
                legend: {
                    position: 'top',
                },
                tooltip: {
                    mode: 'index',
                    intersect: false
                }
            }
        }
    });
}

// Update AI insights based on user interactions
function updateAIInsights(interaction) {
    // This is a simplified version of how the AI agent would learn from user interactions
    // In a real application, this would involve more sophisticated machine learning
    
    const insightsList = document.getElementById('insightsList');
    const lowerInteraction = interaction.toLowerCase();
    
    // Check if the interaction contains certain keywords and update insights accordingly
    if (lowerInteraction.includes('meditation') || lowerInteraction.includes('meditate')) {
        // Add a new insight about meditation if it doesn't already exist
        if (!insightsList.innerHTML.includes('meditation')) {
            const newInsight = document.createElement('li');
            newInsight.textContent = 'You benefit from regular meditation sessions';
            insightsList.appendChild(newInsight);
        }
    }
    
    if (lowerInteraction.includes('anxiety') || lowerInteraction.includes('anxious')) {
        // Add a new insight about anxiety if it doesn't already exist
        if (!insightsList.innerHTML.includes('anxiety')) {
            const newInsight = document.createElement('li');
            newInsight.textContent = 'You experience anxiety, especially in the morning';
            insightsList.appendChild(newInsight);
        }
    }
    
    if (lowerInteraction.includes('sleep') || lowerInteraction.includes('tired')) {
        // Add a new insight about sleep if it doesn't already exist
        if (!insightsList.innerHTML.includes('sleep')) {
            const newInsight = document.createElement('li');
            newInsight.textContent = 'Your sleep quality improves with evening relaxation';
            insightsList.appendChild(newInsight);
        }
    }
    
    // Update recommendations based on new insights
    updateRecommendations();
}

// Update personalized recommendations based on insights
function updateRecommendations() {
    const recCards = document.querySelectorAll('.rec-card');
    
    // This is a simplified version of how recommendations would be updated
    // In a real application, this would involve more sophisticated algorithms
    
    // Example: If there are more than 3 insights about anxiety, add a recommendation
    const insightsList = document.getElementById('insightsList');
    if (insightsList.children.length > 3) {
        // Check if we already have an anxiety recommendation
        let hasAnxietyRec = false;
        recCards.forEach(card => {
            if (card.querySelector('h4').textContent.includes('Anxiety')) {
                hasAnxietyRec = true;
            }
        });
        
        // If we don't have an anxiety recommendation, add one
        if (!hasAnxietyRec) {
            const recContainer = document.querySelector('.recommendation-cards');
            const newRec = document.createElement('div');
            newRec.className = 'rec-card';
            newRec.innerHTML = `
                <i class="fas fa-heartbeat"></i>
                <h4>Anxiety Management</h4>
                <p>Try the 4-7-8 breathing technique: inhale for 4 seconds, hold for 7, exhale for 8</p>
            `;
            recContainer.appendChild(newRec);
        }
    }
}

// Neue Funktion fÃ¼r Krebspatienten-Ressourcen
function initializeCancerResources() {
    const resourcesContainer = document.createElement('div');
    resourcesContainer.className = 'cancer-resources';
    resourcesContainer.innerHTML = `
        <h3>Ressourcen fÃ¼r Krebspatienten</h3>
        <div class="resource-cards">
            <div class="resource-card">
                <i class="fas fa-book-medical"></i>
                <h4>Informationen zur Chemotherapie</h4>
                <p>Erfahren Sie, was Sie vor, wÃ¤hrend und nach der Chemotherapie erwarten kÃ¶nnen.</p>
                <button class="resource-btn">Mehr erfahren</button>
            </div>
            <div class="resource-card">
                <i class="fas fa-users"></i>
                <h4>Selbsthilfegruppen</h4>
                <p>Verbinden Sie sich mit anderen, die Ã¤hnliche Erfahrungen gemacht haben.</p>
                <button class="resource-btn">Gruppen finden</button>
            </div>
            <div class="resource-card">
                <i class="fas fa-heart"></i>
                <h4>Umgang mit Angst</h4>
                <p>Techniken und Strategien zur BewÃ¤ltigung von Angst und Unsicherheit.</p>
                <button class="resource-btn">Techniken ansehen</button>
            </div>
            <div class="resource-card">
                <i class="fas fa-utensils"></i>
                <h4>ErnÃ¤hrungstipps</h4>
                <p>ErnÃ¤hrungsempfehlungen fÃ¼r die Zeit wÃ¤hrend und nach der Behandlung.</p>
                <button class="resource-btn">Tipps ansehen</button>
            </div>
        </div>
    `;
    
    // FÃ¼ge die Ressourcen zum AI-Agent-Bereich hinzu
    const aiAgentSection = document.querySelector('.ai-recommendations');
    aiAgentSection.appendChild(resourcesContainer);
    
    // Event-Listener fÃ¼r die Ressourcen-Buttons
    document.querySelectorAll('.resource-btn').forEach(button => {
        button.addEventListener('click', function() {
            const resourceType = this.parentElement.querySelector('h4').textContent;
            showResourceDetails(resourceType);
        });
    });
}

function showResourceDetails(resourceType) {
    // Erstelle ein Modal mit detaillierten Informationen
    const modal = document.createElement('div');
    modal.className = 'resource-modal';
    
    let content = '';
    
    switch(resourceType) {
        case 'Informationen zur Chemotherapie':
            content = `
                <h3>Informationen zur Chemotherapie</h3>
                <div class="resource-content">
                    <h4>Was ist Chemotherapie?</h4>
                    <p>Chemotherapie ist eine medikamentÃ¶se Behandlung, die Krebszellen abtÃ¶tet oder ihr Wachstum verhindert.</p>
                    
                    <h4>Was Sie vor der Behandlung wissen sollten:</h4>
                    <ul>
                        <li>Die Behandlung kann ambulant oder stationÃ¤r erfolgen</li>
                        <li>Die Dauer variiert je nach Art des Krebses und des Medikaments</li>
                        <li>Es ist wichtig, alle Fragen an Ihr medizinisches Team zu stellen</li>
                    </ul>
                    
                    <h4>MÃ¶gliche Nebenwirkungen:</h4>
                    <ul>
                        <li>MÃ¼digkeit</li>
                        <li>Ãœbelkeit und Erbrechen</li>
                        <li>Haarausfall</li>
                        <li>Appetitlosigkeit</li>
                        <li>ErhÃ¶hte InfektanfÃ¤lligkeit</li>
                    </ul>
                    
                    <h4>Tipps zur Vorbereitung:</h4>
                    <ul>
                        <li>Organisieren Sie UnterstÃ¼tzung fÃ¼r den Alltag</li>
                        <li>Bereiten Sie sich auf mÃ¶gliche Nebenwirkungen vor</li>
                        <li>FÃ¼hren Sie ein Tagebuch Ã¼ber Ihre Symptome</li>
                    </ul>
                </div>
            `;
            break;
        case 'Selbsthilfegruppen':
            content = `
                <h3>Selbsthilfegruppen fÃ¼r Krebspatienten</h3>
                <div class="resource-content">
                    <p>Der Austausch mit anderen Betroffenen kann eine wichtige Quelle der UnterstÃ¼tzung sein.</p>
                    
                    <h4>Vorteile von Selbsthilfegruppen:</h4>
                    <ul>
                        <li>Emotionale UnterstÃ¼tzung von Menschen, die Sie verstehen</li>
                        <li>Praktische Tipps und Erfahrungsaustausch</li>
                        <li>Reduzierung von Isolation und Einsamkeit</li>
                        <li>StÃ¤rkung des Selbstbewusstseins</li>
                    </ul>
                    
                    <h4>Wie Sie eine passende Gruppe finden:</h4>
                    <ul>
                        <li>Fragen Sie Ihr medizinisches Team nach Empfehlungen</li>
                        <li>Kontaktieren Sie Krebsberatungsstellen</li>
                        <li>Recherchieren Sie online nach Gruppen in Ihrer NÃ¤he</li>
                        <li>Erkundigen Sie sich bei Ihrer Krankenkasse</li>
                    </ul>
                    
                    <h4>Online-Selbsthilfegruppen:</h4>
                    <p>Wenn Sie keine Gruppe in Ihrer NÃ¤he finden oder mobil eingeschrÃ¤nkt sind, gibt es auch viele Online-Optionen:</p>
                    <ul>
                        <li>Krebsinformationsdienst des Deutschen Krebsforschungszentrums</li>
                        <li>Deutsche Krebshilfe Online-Community</li>
                        <li>Facebook-Gruppen fÃ¼r spezifische Krebsarten</li>
                    </ul>
                </div>
            `;
            break;
        case 'Umgang mit Angst':
            content = `
                <h3>Umgang mit Angst und Unsicherheit</h3>
                <div class="resource-content">
                    <p>Angst ist eine normale Reaktion auf eine Krebsdiagnose und Behandlung. Hier sind einige Strategien, die helfen kÃ¶nnen:</p>
                    
                    <h4>AtemÃ¼bungen:</h4>
                    <p>Die 4-7-8-Atmung: Atmen Sie 4 Sekunden ein, halten Sie 7 Sekunden den Atem an, atmen Sie 8 Sekunden aus. Wiederholen Sie dies 4 Mal.</p>
                    
                    <h4>Achtsamkeitsmeditation:</h4>
                    <p>Konzentrieren Sie sich auf den gegenwÃ¤rtigen Moment, ohne zu urteilen. Dies kann helfen, sich von beunruhigenden Gedanken zu distanzieren.</p>
                    
                    <h4>Kognitive Techniken:</h4>
                    <ul>
                        <li>Identifizieren Sie Ihre spezifischen Ã„ngste</li>
                        <li>Fragen Sie sich, wie realistisch diese Ã„ngste sind</li>
                        <li>Entwickeln Sie alternative, positivere Gedanken</li>
                        <li>Konzentrieren Sie sich auf das, was Sie kontrollieren kÃ¶nnen</li>
                    </ul>
                    
                    <h4>Praktische Strategien:</h4>
                    <ul>
                        <li>Informieren Sie sich grÃ¼ndlich Ã¼ber Ihre Erkrankung und Behandlung</li>
                        <li>FÃ¼hren Sie ein Tagebuch Ã¼ber Ihre GefÃ¼hle</li>
                        <li>Planen Sie angenehme AktivitÃ¤ten</li>
                        <li>Suchen Sie professionelle UnterstÃ¼tzung, wenn die Angst Ã¼berwÃ¤ltigend wird</li>
                    </ul>
                </div>
            `;
            break;
        case 'ErnÃ¤hrungstipps':
            content = `
                <h3>ErnÃ¤hrung wÃ¤hrend und nach der Krebsbehandlung</h3>
                <div class="resource-content">
                    <p>Eine ausgewogene ErnÃ¤hrung kann Ihre Gesundheit wÃ¤hrend der Behandlung unterstÃ¼tzen und Nebenwirkungen lindern.</p>
                    
                    <h4>Allgemeine Empfehlungen:</h4>
                    <ul>
                        <li>Essen Sie abwechslungsreich und farbenfroh</li>
                        <li>WÃ¤hlen Sie Vollkornprodukte</li>
                        <li>Essen Sie tÃ¤glich GemÃ¼se und Obst</li>
                        <li>Begrenzen Sie verarbeitete Lebensmittel</li>
                        <li>Trinken Sie ausreichend Wasser</li>
                    </ul>
                    
                    <h4>Bei Appetitlosigkeit:</h4>
                    <ul>
                        <li>Essen Sie mehrere kleine Mahlzeiten statt weniger groÃŸer</li>
                        <li>WÃ¤hlen Sie nÃ¤hrstoffreiche, kalorienreiche Lebensmittel</li>
                        <li>Trinken Sie Smoothies oder Suppen</li>
                        <li>Essen Sie, wenn Sie Hunger haben, auch wenn es nicht zu den Ã¼blichen Mahlzeiten ist</li>
                    </ul>
                    
                    <h4>Bei Ãœbelkeit:</h4>
                    <ul>
                        <li>Vermeiden Sie fettige, stark gewÃ¼rzte oder sehr sÃ¼ÃŸe Speisen</li>
                        <li>Essen Sie trockene, milde Lebensmittel wie Zwieback oder Reis</li>
                        <li>Trinken Sie Ingwertee oder Pfefferminztee</li>
                        <li>Essen Sie langsam und in kleinen Bissen</li>
                    </ul>
                    
                    <h4>Wichtige NÃ¤hrstoffe:</h4>
                    <ul>
                        <li>Protein: Wichtig fÃ¼r den Erhalt der Muskelmasse</li>
                        <li>Omega-3-FettsÃ¤uren: KÃ¶nnen EntzÃ¼ndungen reduzieren</li>
                        <li>Antioxidantien: UnterstÃ¼tzen das Immunsystem</li>
                        <li>Ballaststoffe: FÃ¶rdern die Verdauung</li>
                    </ul>
                </div>
            `;
            break;
        default:
            content = `<h3>${resourceType}</h3><p>Detaillierte Informationen zu diesem Thema werden bald verfÃ¼gbar sein.</p>`;
    }
    
    modal.innerHTML = `
        <div class="modal-content">
            <span class="close-modal">&times;</span>
            ${content}
        </div>
    `;
    
    document.body.appendChild(modal);
    
    // SchlieÃŸen-Button-FunktionalitÃ¤t
    modal.querySelector('.close-modal').addEventListener('click', function() {
        document.body.removeChild(modal);
    });
    
    // SchlieÃŸen beim Klicken auÃŸerhalb des Modals
    modal.addEventListener('click', function(e) {
        if (e.target === modal) {
            document.body.removeChild(modal);
        }
    });
}

// Initialize the AI agent when the page loads
document.addEventListener('DOMContentLoaded', function() {
    initializeAIAgent();
    initializeCancerResources(); // Neue Funktion aufrufen
});

// Add some initial styling for chat messages and animations
const style = document.createElement('style');
style.textContent = `
    .message {
        margin: 10px;
        padding: 15px 20px;
        border-radius: 20px;
        max-width: 70%;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }
    .user-message {
        background-color: var(--primary-green);
        color: white;
        margin-left: auto;
        border-bottom-right-radius: 5px;
    }
    .ai-message {
        background-color: var(--light-green);
        color: var(--text-dark);
        margin-right: auto;
        border-bottom-left-radius: 5px;
    }
    .typing-indicator {
        display: flex;
        gap: 5px;
        padding: 15px;
        background: var(--light-green);
        border-radius: 20px;
        width: fit-content;
        margin: 10px;
    }
    .typing-indicator span {
        width: 8px;
        height: 8px;
        background: var(--text-dark);
        border-radius: 50%;
        animation: typing 1s infinite ease-in-out;
    }
    .typing-indicator span:nth-child(2) { animation-delay: 0.2s; }
    .typing-indicator span:nth-child(3) { animation-delay: 0.4s; }
    @keyframes typing {
        0%, 100% { transform: translateY(0); }
        50% { transform: translateY(-5px); }
    }
    .completion-message {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        text-align: center;
        animation: fadeInOut 5s ease-in-out;
    }
    .completion-message i {
        color: var(--primary-green);
        font-size: 2rem;
        margin-bottom: 10px;
    }
    @keyframes fadeInOut {
        0%, 100% { opacity: 0; transform: translate(-50%, -50%) scale(0.9); }
        10%, 90% { opacity: 1; transform: translate(-50%, -50%) scale(1); }
    }
    .cancer-resources {
        margin-top: 2rem;
        padding-top: 2rem;
        border-top: 1px solid var(--glass-border);
    }
    
    .resource-cards {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
        margin-top: 1.5rem;
    }
    
    .resource-card {
        background: rgba(255, 255, 255, 0.9);
        border-radius: 15px;
        padding: 1.5rem;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);
        transition: all 0.3s ease;
        text-align: center;
    }
    
    .resource-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
    }
    
    .resource-card i {
        color: var(--primary-green);
        font-size: 2rem;
        margin-bottom: 1rem;
    }
    
    .resource-card h4 {
        color: var(--text-dark);
        margin-bottom: 0.5rem;
    }
    
    .resource-card p {
        font-size: 0.9rem;
        color: #666;
        margin-bottom: 1rem;
    }
    
    .resource-btn {
        background: var(--primary-green);
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 20px;
        cursor: pointer;
        transition: all 0.3s ease;
        font-size: 0.9rem;
    }
    
    .resource-btn:hover {
        background: var(--dark-green);
    }
    
    .resource-modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.7);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }
    
    .modal-content {
        background: white;
        border-radius: 15px;
        padding: 2rem;
        max-width: 800px;
        max-height: 80vh;
        overflow-y: auto;
        position: relative;
    }
    
    .close-modal {
        position: absolute;
        top: 1rem;
        right: 1rem;
        font-size: 1.5rem;
        cursor: pointer;
        color: #666;
    }
    
    .resource-content {
        margin-top: 1.5rem;
    }
    
    .resource-content h4 {
        color: var(--primary-green);
        margin: 1.5rem 0 0.5rem;
    }
    
    .resource-content ul {
        margin-left: 1.5rem;
        margin-bottom: 1rem;
    }
    
    .resource-content li {
        margin-bottom: 0.5rem;
    }
`;
document.head.appendChild(style); 
// Your existing code above...

// Insert this at the bottom of app.js
function logMood(mood, notes) {
    fetch('http://127.0.0.1:5001/log', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            mood: mood,
            notes: notes
        })
    })
    .then(response => response.json())
    .then(data => {
        console.log('Success:', data.message);
        alert('Mood logged successfully!');
    })
    .catch((error) => {
        console.error('Error:', error);
        alert('Failed to log mood.');
    });
}
